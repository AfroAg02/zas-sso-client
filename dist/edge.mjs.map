{"version":3,"sources":["../src/lib/crypto.ts","../src/lib/cookies.ts","../src/lib/api.ts","../src/services/server-actions.ts","../src/lib/url.ts","../src/lib/middleware.ts","../src/lib/parse-redirect-url.ts","../src/services/handlers.ts","../src/init-config.ts","../src/lib/decode.ts","../src/permissions-control/lib.ts","../src/permissions-control/server.ts"],"names":["nextRedirect","NextResponse","ENDPOINTS"],"mappings":"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","file":"edge.mjs","sourcesContent":["import { CompactEncrypt, base64url, compactDecrypt } from \"jose\";\r\n\r\nconst SALT_LENGTH = 16; // bytes\r\nconst ITERATIONS = 100_000;\r\nconst ENC = \"A256GCM\"; // 256-bit AES-GCM\r\nconst ALG = \"dir\"; // direct symmetric key\r\n\r\nfunction getSecret(): string {\r\n  const secret = process.env.ENCRYPTION_SECRET;\r\n  if (!secret) throw new Error(\"ENCRYPTION_SECRET env var is required\");\r\n  return secret;\r\n}\r\n\r\nconst te = new TextEncoder();\r\nconst td = new TextDecoder();\r\n\r\nasync function deriveKeyRaw(secret: string, salt: any): Promise<Uint8Array> {\r\n  // Derivamos 256 bits usando PBKDF2 SHA-256\r\n  const baseKey = await crypto.subtle.importKey(\r\n    \"raw\",\r\n    te.encode(secret),\r\n    { name: \"PBKDF2\" },\r\n    false,\r\n    [\"deriveBits\"]\r\n  );\r\n  // Create an ArrayBuffer containing exactly the salt bytes to satisfy BufferSource typing\r\n\r\n  const bits = await crypto.subtle.deriveBits(\r\n    { name: \"PBKDF2\", salt, iterations: ITERATIONS, hash: \"SHA-256\" },\r\n    baseKey,\r\n    256\r\n  );\r\n  return new Uint8Array(bits);\r\n}\r\n\r\nfunction toHex(buf: Uint8Array): string {\r\n  return Array.from(buf)\r\n    .map((b) => b.toString(16).padStart(2, \"0\"))\r\n    .join(\"\");\r\n}\r\nfunction fromHex(hex: string): Uint8Array {\r\n  if (hex.length % 2 !== 0) throw new Error(\"Invalid hex length\");\r\n  const arr = new Uint8Array(hex.length / 2);\r\n  for (let i = 0; i < hex.length; i += 2) {\r\n    arr[i / 2] = parseInt(hex.slice(i, i + 2), 16);\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport const encrypt = async (text: string): Promise<string> => {\r\n  const salt = crypto.getRandomValues(new Uint8Array(SALT_LENGTH));\r\n  const keyBytes = await deriveKeyRaw(getSecret(), salt);\r\n\r\n  // Usamos jose CompactEncrypt con key simétrica derivada.\r\n  const jwe = await new CompactEncrypt(te.encode(text))\r\n    .setProtectedHeader({ alg: ALG, enc: ENC })\r\n    .encrypt(keyBytes);\r\n\r\n  // Formato: saltHex:JWE  (rompe compatibilidad con formato previo, pero decrypt soporta fallback)\r\n  return `${toHex(salt)}:${jwe}`;\r\n};\r\n\r\nexport const decrypt = async (encryptedText: string): Promise<string> => {\r\n  if (!encryptedText) throw new Error(\"Empty encrypted text\");\r\n\r\n  // Intentar nuevo formato saltHex:JWE\r\n  const firstColon = encryptedText.indexOf(\":\");\r\n  if (firstColon === -1) {\r\n    // Intentar legacy (4 partes)\r\n    return legacyDecrypt(encryptedText);\r\n  }\r\n\r\n  const saltHex = encryptedText.slice(0, firstColon);\r\n  const jwe = encryptedText.slice(firstColon + 1);\r\n\r\n  // Heurística: JWE Compact tiene exactamente 4 puntos (5 partes). Para alg \"dir\" el segundo segmento (Encrypted Key) puede ser vacío,\r\n  // produciendo dos puntos consecutivos (ej: header..iv.ciphertext.tag). El regex original exigía contenido en cada parte y fallaba.\r\n  const dotCount = (jwe.match(/\\./g) || []).length;\r\n  if (dotCount !== 4) {\r\n    // No parece JWE -> fallback legacy\r\n    return legacyDecrypt(encryptedText);\r\n  }\r\n\r\n  try {\r\n    const salt = fromHex(saltHex);\r\n    const keyBytes = await deriveKeyRaw(getSecret(), salt);\r\n    const { plaintext } = await compactDecrypt(jwe, keyBytes);\r\n    return td.decode(plaintext);\r\n  } catch (e) {\r\n    console.error(\"Decryption failed (jwe path):\", e);\r\n    throw new Error(\"Decryption failed\");\r\n  }\r\n};\r\n\r\n// Soporte de lectura del formato antiguo (salt:iv:tag:cipher) - ya no se genera, pero se intenta descifrar si aparece.\r\nasync function legacyDecrypt(encryptedText: string): Promise<string> {\r\n  const parts = encryptedText.split(\":\");\r\n  if (parts.length !== 4) {\r\n    console.error(\r\n      \"Invalid encrypted format (legacy). Received:\",\r\n      encryptedText\r\n    );\r\n    throw new Error(\"Invalid encrypted format\");\r\n  }\r\n  throw new Error(\r\n    \"Legacy encryption format no longer supported in Edge version\"\r\n  );\r\n}\r\n\r\nexport function generateStateBase64Url(bytes = 16): string {\r\n  const rnd = new Uint8Array(bytes);\r\n  crypto.getRandomValues(rnd);\r\n  return base64url.encode(rnd); // p.ej: \"qVt2o9bq3f0Lk1v0iUF7NQ\"\r\n}\r\n","\"use server\";\r\nimport { cookies } from \"next/headers\";\r\nimport { getCookieName, getMaxCookiesAge } from \"../init-config\";\r\nimport { SessionData } from \"../types\";\r\nimport { encrypt } from \"./crypto\";\r\n\r\nexport async function setSessionCookies(data: SessionData) {\r\n  const c = await cookies();\r\n  const encryptedData = await encrypt(JSON.stringify(data));\r\n  const name = getCookieName();\r\n  const age = getMaxCookiesAge();\r\n  c.set(name, encryptedData, {\r\n    httpOnly: true,\r\n    secure: process.env.NODE_ENV === \"production\",\r\n    sameSite: \"lax\",\r\n    maxAge: age,\r\n    path: \"/\",\r\n  });\r\n}\r\n\r\nexport async function readCookies() {\r\n  const c = await cookies();\r\n  return c.get(getCookieName())?.value;\r\n}\r\n\r\nexport async function clearSessionCookies() {\r\n  const c = await cookies();\r\n  c.delete(getCookieName());\r\n}\r\n","export interface CustomApiError {\r\n  title?: string;\r\n  status: number;\r\n  detail?: string;\r\n}\r\n\r\nexport class ApiError extends Error {\r\n  title: string;\r\n\r\n  status: number;\r\n\r\n  detail: string;\r\n\r\n  constructor(error: CustomApiError & object) {\r\n    super();\r\n    this.title = error.title ?? \"\";\r\n    this.status = error.status;\r\n    this.detail = error.detail ?? \"\";\r\n  }\r\n\r\n  toString() {\r\n    return `${this.title} - ${this.status} - ${this.detail.toString()}`;\r\n  }\r\n}\r\n\r\nexport type ApiResponse<T> = {\r\n  data?: T;\r\n  error: boolean;\r\n  status: number;\r\n  message?: string;\r\n} & CustomApiError;\r\n\r\nexport type ApiStatusResponse = {\r\n  status: number;\r\n};\r\n\r\n\r\n\r\nexport const isApiError = (error: unknown): error is ApiError => {\r\n  if (error instanceof ApiError) return true;\r\n  return false;\r\n};\r\n\r\nexport const handleApiServerError = async <T>(\r\n  response: Response\r\n): Promise<ApiResponse<T>> => {\r\n  try {\r\n    const contentType = response.headers.get(\"content-type\");\r\n\r\n    if (response.status === 401) {\r\n      // await refreshServerSession();\r\n      return {\r\n        error: true,\r\n        status: response.status,\r\n        message: \"No autorizado. Por favor, inicia sesión nuevamente.\",\r\n      };\r\n    }\r\n\r\n    if (contentType?.includes(\"application/json\")) {\r\n      const error = await response.json();\r\n      console.error(\"API Error:\", { error, url: response.url });\r\n      return {\r\n        error: true,\r\n        status: response.status,\r\n        message: getErrorMessage(error),\r\n      };\r\n    } else {\r\n      // No es JSON, intentamos obtener texto plano\r\n      const errorText = await response.text();\r\n      console.error(\"API Error on text:\", { error: errorText, url: response });\r\n      return {\r\n        error: true,\r\n        status: response.status,\r\n        message: errorText || \"Ocurrió un error inesperado\",\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error parsing response:\", err, response.url);\r\n    return {\r\n      error: true,\r\n      status: response.status,\r\n      message: \"Unexpected server error\",\r\n    };\r\n  }\r\n};\r\n\r\nexport const buildApiResponseAsync = async <T>(\r\n  response: Response\r\n): Promise<ApiResponse<T>> => {\r\n  try {\r\n    if (\r\n      response.status === 204 ||\r\n      response.headers.get(\"content-length\") === \"0\"\r\n    ) {\r\n      return await Promise.resolve({\r\n        data: null as unknown as T,\r\n        error: false,\r\n        status: response.status,\r\n      });\r\n    }\r\n\r\n    const data = await response.json();\r\n    return await Promise.resolve({\r\n      data,\r\n      error: false,\r\n      status: response.status,\r\n    });\r\n  } catch (e) {\r\n    if (isApiError(e)) {\r\n      return { ...e, title: e.title, error: true };\r\n    }\r\n    return { status: 500, error: true };\r\n  }\r\n};\r\n\r\nexport const getErrorMessage = (error: unknown): string => {\r\n  if (typeof error === \"string\") return error;\r\n  if (error instanceof Error) return error.message;\r\n  if (error instanceof ApiError) return error.detail;\r\n  if (isApiError(error)) return error.detail;\r\n  if (Array.isArray(error)) {\r\n    return error.map(e => e.detail).join(\", \");\r\n  }\r\n  return \"Ocurrió un error inesperado...\";\r\n};\r\n","\"use server\";\r\n\r\nimport { ApiResponse } from \"../types/fetch/api\";\r\nimport { getEndpoints } from \"../init-config\";\r\nimport {\r\n  clearSessionCookies,\r\n  readCookies,\r\n  setSessionCookies,\r\n} from \"../lib/cookies\";\r\nimport { decrypt } from \"../lib/crypto\";\r\nimport { Email, Phone, SessionData, Tokens, User } from \"../types\";\r\nimport { buildApiResponseAsync, handleApiServerError } from \"../lib/api\";\r\n\r\n// Tipos\r\n\r\n//# Almacenar sesión en cookies\r\nexport const persistUserSessionInCookies = async (\r\n  session: SessionData,\r\n  callbacks?: { onSuccess?: () => void; onError?: (error: unknown) => void }\r\n) => {\r\n  try {\r\n    const data: SessionData = {\r\n      tokens: session.tokens as Tokens,\r\n      user: {\r\n        id: session.user?.id as number,\r\n        name: session.user?.name as string,\r\n        emails: session.user?.emails as Email[],\r\n        phones: session.user?.phones as Phone[],\r\n        photoUrl: session.user?.photoUrl as string,\r\n      },\r\n    };\r\n\r\n    await setSessionCookies(data);\r\n\r\n    callbacks?.onSuccess?.();\r\n  } catch (error) {\r\n    console.error(\"Error persisting session in cookies:\", error);\r\n    callbacks?.onError?.(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//# Eliminar sesión de las cookies\r\nexport const deleteCookiesSession = async (callbacks?: {\r\n  onSuccess?: () => void;\r\n  onError?: (error: unknown) => void;\r\n}) => {\r\n  try {\r\n    await clearSessionCookies();\r\n\r\n    callbacks?.onSuccess?.();\r\n  } catch (error) {\r\n    callbacks?.onError?.(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Autenticar con credenciales\r\nexport const authenticateWithTokens = async (\r\n  credentials: Tokens,\r\n  callbacks?: { onSuccess?: () => void; onError?: (error: unknown) => void }\r\n): Promise<ApiResponse<User | null>> => {\r\n  try {\r\n    const userResponse = await fetchUser(credentials.accessToken);\r\n    if (!userResponse.data) return userResponse;\r\n\r\n    await persistUserSessionInCookies({\r\n      user: userResponse.data,\r\n      tokens: credentials,\r\n    });\r\n    callbacks?.onSuccess?.();\r\n    console.log(\"User authenticated successfully:\", userResponse);\r\n    return {\r\n      data: userResponse.data,\r\n      status: userResponse.status,\r\n      error: false,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error authenticating with credentials:\", error);\r\n    callbacks?.onError?.(error);\r\n    return { data: null, status: 500, error: true };\r\n  }\r\n};\r\n\r\n// Refrescar token\r\nexport const refreshTokens = async (callbacks?: {\r\n  onSuccess?: () => void;\r\n  onError?: (error: unknown) => void;\r\n}) => {\r\n  try {\r\n    const session = await getCookiesSession();\r\n    if (!session?.tokens?.refreshToken) throw new Error(\"No session\");\r\n\r\n    const { refresh, me } = getEndpoints();\r\n    const response = await fetch(refresh, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ refreshToken: session.tokens.refreshToken }),\r\n    });\r\n\r\n    if (!response.ok) return handleApiServerError(response);\r\n\r\n    const tokens: Tokens = await response.json();\r\n    let user = session.user;\r\n    if (!user && tokens.accessToken) {\r\n      const userResponse = await fetchUser(tokens.accessToken, me);\r\n      if (!userResponse.data) return handleApiServerError(response);\r\n      user = userResponse.data;\r\n    }\r\n    if (!user) return handleApiServerError(response);\r\n    await persistUserSessionInCookies({ user, tokens });\r\n    callbacks?.onSuccess?.();\r\n  } catch (error) {\r\n    await deleteCookiesSession();\r\n    callbacks?.onError?.(error);\r\n    console.error(\"Error refreshing tokens:\", error);\r\n  }\r\n};\r\n\r\n// Obtener información de usuario\r\nconst fetchUser = async (\r\n  accessToken: string,\r\n  endpoint?: string\r\n): Promise<ApiResponse<User>> => {\r\n  const { me } = getEndpoints();\r\n  const url = endpoint || me;\r\n  const response = await fetch(url, {\r\n    headers: { Authorization: `Bearer ${accessToken}` },\r\n  });\r\n  if (!response.ok) return handleApiServerError(response);\r\n  return buildApiResponseAsync<User>(response);\r\n};\r\n\r\nexport const getCookiesSession = async () => {\r\n  const encryptedSession = await readCookies();\r\n\r\n  if (!encryptedSession) {\r\n    return { user: null, tokens: null, shouldClear: false };\r\n  }\r\n\r\n  try {\r\n    const decryptedData = await decrypt(encryptedSession);\r\n    const sessionData = JSON.parse(decryptedData) as SessionData;\r\n    if (!sessionData || !sessionData.tokens) {\r\n      return { user: null, tokens: null, shouldClear: true };\r\n    }\r\n    return JSON.parse(decryptedData) as SessionData;\r\n  } catch {\r\n    return { user: null, tokens: null, shouldClear: true };\r\n  }\r\n};\r\n\r\n","import { redirect as nextRedirect } from \"next/navigation\";\r\nimport { getAppUrl, getSsoUrl } from \"../init-config\";\r\nimport { generateStateBase64Url } from \"./crypto\";\r\n\r\n/**\r\n * Construye la URL de login SSO incluyendo un \"state\" aleatorio y el redirect de callback.\r\n */\r\nexport const getLoginUrl = () => {\r\n  const state = generateStateBase64Url();\r\n  const url = new URL(`${getSsoUrl()}`);\r\n  url.searchParams.set(\"state\", state);\r\n  const redirectUri = `${getAppUrl()}/api/sso/callback`;\r\n  url.searchParams.set(\"redirect_uri\", redirectUri);\r\n  return url.toString();\r\n};\r\n\r\nexport type RedirectToLoginOptions = {\r\n  /** Si true, añade la ruta actual como parámetro \"from\" para uso posterior */\r\n  preservePath?: boolean;\r\n  /** Usa replace() en vez de push/navigation normal (solo cliente) */\r\n  replace?: boolean;\r\n  /** Nombre de la query donde guardar el path actual (por defecto from) */\r\n  fromParamName?: string;\r\n};\r\n\r\n/**\r\n * Redirige al login tanto en entorno server (middleware / server component / route handler)\r\n * como en cliente (componentes con \"use client\").\r\n *\r\n * En server usa next/navigation.redirect (lanza excepción controlada para cortar render).\r\n * En cliente usa window.location.assign o replace según la opción.\r\n */\r\nexport function redirectToLogin(opts: RedirectToLoginOptions = {}) {\r\n  const {\r\n    preservePath = false,\r\n    replace = false,\r\n    fromParamName = \"from\",\r\n  } = opts;\r\n  let loginUrl = getLoginUrl();\r\n\r\n  if (preservePath) {\r\n    // Solo añadimos el path actual si estamos en cliente y tenemos window\r\n    const currentPath =\r\n      typeof window !== \"undefined\"\r\n        ? window.location.pathname + window.location.search\r\n        : undefined;\r\n    if (currentPath) {\r\n      const urlObj = new URL(loginUrl);\r\n      // Evita sobrescribir si ya existe\r\n      if (!urlObj.searchParams.get(fromParamName)) {\r\n        urlObj.searchParams.set(fromParamName, currentPath);\r\n      }\r\n      loginUrl = urlObj.toString();\r\n    }\r\n  }\r\n\r\n  if (typeof window === \"undefined\") {\r\n    // Entorno server\r\n    return nextRedirect(loginUrl);\r\n  }\r\n\r\n  if (replace) {\r\n    window.location.replace(loginUrl);\r\n  } else {\r\n    window.location.assign(loginUrl);\r\n  }\r\n}\r\n","import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getCookiesSession } from \"../services/server-actions\";\r\nimport { SSOInitOptions } from \"../types\";\r\nimport { getLoginUrl } from \"./url\";\r\n\r\n\r\n\r\n\r\n/** Determina si un pathname está dentro de alguno de los prefijos protegidos. */\r\nfunction isProtected(pathname: string, protectedRoutes: string[] | null) {\r\n  if (!protectedRoutes) return true; // sin lista => todo protegido\r\n  return protectedRoutes.some((prefix) => {\r\n    if (!prefix) return false;\r\n    if (prefix === \"/\") return true;\r\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\r\n  });\r\n}\r\n\r\n/** Construye el array de matchers para exportarlo en `config`. */\r\nexport function buildMiddlewareConfig(protectedRoutes?: string[]) {\r\n  if (protectedRoutes && protectedRoutes.length) {\r\n    const unique = Array.from(new Set(protectedRoutes));\r\n    const matcher = unique.map((r) => {\r\n      const cleaned = r.endsWith(\"/\") ? r.slice(0, -1) : r; // quitar slash final\r\n      return cleaned === \"/\" ? \"/:path*\" : `${cleaned}/:path*`;\r\n    });\r\n    return { matcher } as const;\r\n  }\r\n  // Sin rutas => proteger todo (excepto assets de Next, opcional). Para simplificar todo.\r\n  return { matcher: [\"/(.*)\"] } as const;\r\n}\r\n\r\n/**\r\n * Crea un middleware de SSO que:\r\n *  - Verifica si la ruta requiere auth (según prefijos). Si no, deja pasar.\r\n *  - Si requiere auth y NO hay sesión => redirige a login con callbackUrl.\r\n *  - Si requiere auth y hay sesión => continúa.\r\n */\r\nexport function createSSOMiddleware(options?: SSOInitOptions) {\r\n  const protectedRoutes = options?.protectedRoutes?.length\r\n    ? options?.protectedRoutes\r\n    : null; \r\n\r\n  return async function middleware(req: NextRequest) {\r\n    const { pathname } = req.nextUrl;\r\n\r\n    // Si no necesita auth, continuar.\r\n    if (!isProtected(pathname, protectedRoutes)) {\r\n      return NextResponse.next();\r\n    }\r\n\r\n    // Leer sesión (cifrada) y validar que tenga usuario + tokens\r\n    let hasSession = false;\r\n    try {\r\n      const session = await getCookiesSession();\r\n      hasSession = Boolean(\r\n        session &&\r\n          session.user &&\r\n          session.tokens?.accessToken &&\r\n          session.tokens?.refreshToken\r\n      );\r\n    } catch {\r\n      hasSession = false;\r\n    }\r\n\r\n    if (hasSession) return NextResponse.next();\r\n\r\n\r\n    \r\n    const loginUrl = new URL(getLoginUrl());\r\n    loginUrl.searchParams.set(\"callbackUrl\", req.url);\r\n    return NextResponse.redirect(loginUrl);\r\n  };\r\n}\r\n\r\n// Export util por compatibilidad con el archivo previo (opcional)\r\nexport const _internal = { isProtected, buildMiddlewareConfig };\r\n","export function parseRedirectUrl(\r\n  redirectTo: string,\r\n  baseOrigin: string\r\n): string {\r\n  let target: string;\r\n  try {\r\n    if (/^https?:\\/\\//i.test(redirectTo)) {\r\n      const rUrl = new URL(redirectTo);\r\n      target = rUrl.origin === baseOrigin ? rUrl.toString() : baseOrigin + \"/\"; // solo mismo origin\r\n    } else {\r\n      target = new URL(\r\n        redirectTo.startsWith(\"/\") ? redirectTo : `/${redirectTo}`,\r\n        baseOrigin\r\n      ).toString();\r\n    }\r\n  } catch {\r\n    target = baseOrigin + \"/\";\r\n  }\r\n\r\n  return target;\r\n}\r\n","import { NextResponse } from \"next/server\";\r\nimport { getRedirectUri } from \"../init-config\";\r\nimport { parseRedirectUrl } from \"../lib/parse-redirect-url\"; // Ajusta ruta real\r\nimport { authenticateWithTokens } from \"./server-actions\"; // Ajusta ruta real\r\n\r\n// Orígenes permitidos (puedes ampliar)\r\n\r\nfunction jsonError(\r\n  message: string,\r\n  status: number,\r\n  origin: string | null,\r\n  extra?: any\r\n) {\r\n  const res = NextResponse.json(\r\n    { ok: false, error: message, ...extra },\r\n    { status }\r\n  );\r\n  return res;\r\n}\r\n\r\nexport async function GET(request: Request) {\r\n  const origin = request.headers.get(\"origin\");\r\n  const url = new URL(request.url);\r\n  console.log(\"[  ]SSO Callback URL:\", url.toString());\r\n  // Parámetros esperados\r\n  const accessToken = url.searchParams.get(\"accessToken\");\r\n  const refreshToken = url.searchParams.get(\"refreshToken\");\r\n  // Unifica: usa \"redirect\" (o \"redirectTo\"). Aquí uso \"redirect\".\r\n\r\n  if (!accessToken) return jsonError(\"Missing accessToken\", 400, origin);\r\n  if (!refreshToken) return jsonError(\"Missing refreshToken\", 400, origin);\r\n\r\n  const result = await authenticateWithTokens(\r\n    { accessToken, refreshToken },\r\n    { onError: (e: any) => console.error(\"[callback] authenticate error\", e) }\r\n  );\r\n\r\n  if (result.error || !result.data) {\r\n    return jsonError(\r\n      \"Invalid credentials or user fetch failed\",\r\n      result.status || 401,\r\n      origin\r\n    );\r\n  }\r\n  const redirectUri = getRedirectUri();\r\n  console.log(\"Authentication successful:\", redirectUri);\r\n  // Redirección segura (sanitize)\r\n  const safeUrl = new URL(parseRedirectUrl(redirectUri, url.origin));\r\n  safeUrl.searchParams.delete(\"accessToken\");\r\n  safeUrl.searchParams.delete(\"refreshToken\");\r\n  safeUrl.searchParams.delete(\"state\");\r\n  const safeRedirect = safeUrl.toString();\r\n  const res = NextResponse.redirect(safeRedirect, { status: 302 });\r\n  return res;\r\n}\r\nexport const handlers = { GET };\r\n","import { buildMiddlewareConfig, createSSOMiddleware } from \"./lib/middleware\";\r\nimport { handlers as ssoHandlers } from \"./services/handlers\";\r\nimport { SSOInitOptions } from \"./types\";\r\n\r\nexport let NEXT_PUBLIC_APP_URL: string | undefined = process.env.NEXT_PUBLIC_APP_URL; // Cambia esto por la URL real de tu app\r\nexport let NEXT_PUBLIC_SSO_URL: string = \"http://localhost:3001/login\"; // Cambia esto por la URL real del SSO\r\nexport let REDIRECT_URI: string = \"/\"; // Cambia esto por la URL real de tu app\r\n\r\n// Auth/session config movido desde lib/config.ts\r\nexport let MAX_COOKIES_AGE = 60 * 60 * 24 * 7; // 7 días (permite override)\r\nexport let COOKIE_SESSION_NAME = \"session\"; // este sí puede cambiar via initSSO cookieName\r\nexport const ENDPOINTS = {\r\n  login: `https://api.zasdistributor.com/api/auth/login`,\r\n  refresh: `https://api.zasdistributor.com/api/auth/refresh`,\r\n  me: `https://api.zasdistributor.com/api/users/me`,\r\n};\r\n\r\n// Getters para asegurar lectura del valor actualizado incluso con ordenes de importación\r\nexport function getRedirectUri() {\r\n  return REDIRECT_URI;\r\n}\r\nexport function getAppUrl() {\r\n  return NEXT_PUBLIC_APP_URL;\r\n}\r\nexport function getSsoUrl() {\r\n  return NEXT_PUBLIC_SSO_URL;\r\n}\r\nexport function getCookieName() {\r\n  return COOKIE_SESSION_NAME;\r\n}\r\nexport function getMaxCookiesAge() {\r\n  return MAX_COOKIES_AGE;\r\n}\r\nexport function getEndpoints() {\r\n  return ENDPOINTS;\r\n}\r\n\r\nexport function initSSO(config: SSOInitOptions) {\r\n  const middleware = createSSOMiddleware(config);\r\n\r\n  if (config.appUrl) {\r\n    NEXT_PUBLIC_APP_URL = config.appUrl;\r\n  }\r\n  if (config.ssoUrl) {\r\n    NEXT_PUBLIC_SSO_URL = config.ssoUrl;\r\n  }\r\n\r\n  if (config.redirectUri) {\r\n    REDIRECT_URI = config.redirectUri;\r\n  }\r\n\r\n  if (config.cookieName) COOKIE_SESSION_NAME = config.cookieName;\r\n  if (\r\n    typeof config.cookieMaxAgeSeconds === \"number\" &&\r\n    config.cookieMaxAgeSeconds > 0\r\n  ) {\r\n    MAX_COOKIES_AGE = config.cookieMaxAgeSeconds;\r\n  }\r\n  if (config.endpoints) {\r\n    if (config.endpoints.login) ENDPOINTS.login = config.endpoints.login;\r\n    if (config.endpoints.refresh) ENDPOINTS.refresh = config.endpoints.refresh;\r\n    if (config.endpoints.me) ENDPOINTS.me = config.endpoints.me;\r\n  }\r\n\r\n  const mwConfig = buildMiddlewareConfig(config.protectedRoutes);\r\n  return { middleware, config: mwConfig, handlers: ssoHandlers } as const;\r\n}\r\n\r\nexport const SSO = { init: initSSO };\r\n","\r\nexport function getJWTClaims(jwtToken:string) {\r\n  if (!jwtToken) return null;\r\n  try {\r\n    // Extrae el payload (la parte central del JWT)\r\n    const payloadBase64 = jwtToken.split('.')[1];\r\n    // Corrige el padding y reemplazos de base64url a base64 estándar\r\n    const base64 = payloadBase64.replace(/-/g, '+').replace(/_/g, '/');\r\n    // Decodifica el payload\r\n    const jsonPayload = decodeURIComponent(\r\n      atob(base64)\r\n        .split('')\r\n        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\r\n        .join('')\r\n    );\r\n    const claims = JSON.parse(jsonPayload);\r\n\r\n    // Convierte iat y exp a fechas si existen\r\n    const issuedAt = claims.iat ? new Date(claims.iat * 1000) : null;\r\n    const expiresAt = claims.exp ? new Date(claims.exp * 1000) : null;\r\n\r\n    return {\r\n      iat: claims.iat,\r\n      exp: claims.exp,\r\n      issuedAt,\r\n      expiresAt\r\n    };\r\n  } catch (e) {\r\n    console.error('Token inválido', e);\r\n    return null;\r\n  }\r\n}","export const ENDPOINTS = {\r\n  permissions: `https://api.zasdistributor.com/api/me/permissions`,\r\n  check: (code: string) => `https://api.zasdistributor.com/api/me/permissions/${encodeURIComponent(code)}/check`,\r\n};\r\n","\"use server\";\r\n\r\nimport { getCookiesSession } from \"../services/server-actions\";\r\nimport { ENDPOINTS } from \"./lib\";\r\n\r\n// Simple fetch helpers to consume the new Next.js route handlers from server/components.\r\n\r\nexport interface Permission {\r\n  id: number;\r\n  name: string;\r\n  code: string;\r\n  description: string;\r\n  entity: string;\r\n  type: number;\r\n  roleId: number;\r\n  roleName: string;\r\n  roleCode: string;\r\n}\r\n\r\n// Base fetch options builder\r\nfunction authHeaders(token?: string): Record<string, string> {\r\n  if (token) return { Authorization: `Bearer ${token}` };\r\n  return {}; // explicit object typed as Record<string,string>\r\n}\r\n\r\nexport async function fetchMyPermissions(): Promise<Permission[]> {\r\n  const session = await getCookiesSession();\r\n  if (!session?.tokens?.accessToken) throw new Error(\"No session\");\r\n\r\n  const res = await fetch(ENDPOINTS.permissions, {\r\n    method: \"GET\",\r\n    headers: { ...authHeaders(session.tokens.accessToken) },\r\n    cache: \"no-store\",\r\n  });\r\n  if (!res.ok) {\r\n    if (res.status === 401) throw new Error(\"Unauthorized\");\r\n    throw new Error(`Failed to load permissions (${res.status})`);\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function checkPermission(code: string): Promise<boolean> {\r\n  const session = await getCookiesSession();\r\n  if (!session?.tokens?.accessToken) throw new Error(\"No session\");\r\n  const res = await fetch(ENDPOINTS.check(code), {\r\n    method: \"GET\",\r\n    headers: { ...authHeaders(session.tokens.accessToken) },\r\n    cache: \"no-store\",\r\n  });\r\n  if (res.status === 200) return true;\r\n  if (res.status === 403) return false;\r\n  if (res.status === 401) throw new Error(\"Unauthorized\");\r\n  if (res.status === 400) {\r\n    const body = await res.json();\r\n    throw new Error(body?.detail || \"Invalid request\");\r\n  }\r\n  throw new Error(`Unexpected status ${res.status}`);\r\n}\r\n"]}